{"version":3,"sources":["component/navbar.jsx","component/IEEE.jsx","component/Youtube.jsx","component/Twitter.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","switchDark","$","hasClass","addClass","removeClass","switchLight","react_default","a","createElement","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","href","style","fontSize","onClick","this","Component","IEEESearch","onSearch","query","val","getJSON","article_title","content_type","max_records","apikey","process","r","console","log","embedcode","html","articles","forEach","g","concat","publication_title","title","abstract","html_url","conference_location","conference_dates","fail","doSth","_this","props","clicked","YouTubeSearch","onYoutubeSearch","q","get","part","maxResults","key","data","result","items","obj","snippet","thumbnails","medium","url","videoId","Twitter","onTwitterSearch","_callee2","proxyURL","tweetsURL","regenerator_default","wrap","_context2","prev","next","result_type","count","c_key","c_secretkey","a_token","a_token_secret","tweet","statuses","tw","push","user","screen_name","id_str","embed","arr","fetch","then","response","json","_ref2","Object","asyncToGenerator","mark","_callee","positive","neutral","negative","sentimentalscore","_context","post","text","rate","Number","length","stop","_x","apply","arguments","requestEmbed","App","state","handleClick","e","preventDefault","setState","navbar","marginTop","onSubmit","placeholder","required","IEEE","Youtube","component_Twitter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6b29cd35.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport $ from \"jquery\";\r\n\r\nclass Navbar extends Component {\r\n  //Function to switch component to dark theme\r\n  switchDark = () => {\r\n    if (!$(\"body\").hasClass(\"isDark\")) {\r\n      $(\"body\").addClass(\"isDark\");\r\n      $(\"nav\").removeClass(\"navbar-light\");\r\n      $(\"nav\").removeClass(\"bg-light\");\r\n      $(\"nav\").addClass(\"navbar-dark\");\r\n      $(\"nav\").addClass(\"bg-dark\");\r\n      $(\"hr\").addClass(\"isDark\");\r\n      $(\".card\").addClass(\"bg-dark\");\r\n      $(\".card\").addClass(\"text-white\");\r\n    }\r\n  };\r\n  //Function to switch component to light theme\r\n  switchLight = () => {\r\n    $(\"body\").removeClass(\"isDark\");\r\n    $(\"nav\")\r\n      .removeClass(\"navbar-dark\")\r\n      .removeClass(\"bg-dark\");\r\n    if (!$(\"nav\").hasClass(\"navbar-light\")) {\r\n      $(\"nav\").addClass(\"navbar-light\");\r\n      $(\"nav\").addClass(\"bg-light\");\r\n      $(\"hr\").removeClass(\"isDark\");\r\n      $(\".card\").removeClass(\"bg-dark\");\r\n      $(\".card\").removeClass(\"text-white\");\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      //Bootstrap NavBar\r\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light fixed-top\">\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navBarToggler\"\r\n          aria-controls=\"navBarToggler\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\" />\r\n        </button>\r\n        \r\n        <div className=\"collapse navbar-collapse\" id=\"navBarToggler\">\r\n          <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\r\n            <li className=\"nav-item active\">\r\n              <a className=\"nav-link\" href=\"#home\">\r\n                <i className=\"fa fa-home\" style={{ fontSize: 24 }} />\r\n                <span className=\"d-lg-none\"> Home</span>\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"#content\">\r\n                <i className=\"fa fa-google\" style={{ fontSize: 24 }} />\r\n                <span className=\"d-lg-none\"> Conference Results</span>\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"#YouTube\">\r\n                <i className=\"fa fa-youtube-play\" style={{ fontSize: 24 }} />\r\n                <span className=\"d-lg-none\"> Video Results</span>\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"#TweetContent\">\r\n                <i className=\"fa fa-twitter\" style={{ fontSize: 24 }} />\r\n                <span className=\"d-lg-none\"> Comments</span>\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"float-right\"> {/*Button to switch to dark or light theme */}\r\n          <button className=\"btn btn-light\" onClick={this.switchLight}>\r\n            Light\r\n          </button>\r\n          <button className=\"btn btn-dark\" onClick={this.switchDark}>\r\n            Dark\r\n          </button>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\nimport $ from \"jquery\";\r\nclass IEEESearch extends Component {\r\n  //This function will execute on click of search button\r\n  onSearch = () => {\r\n    let searchURL = \"https://ieeexploreapi.ieee.org/api/v1/search/articles\"; //Search URL for IEEE Search Engine\r\n    const key = process.env.REACT_APP_IEEE; //Key for API\r\n    var query = $(\"#q\").val(); //Retrieve information for query\r\n    //Request IEEE with following parameter\r\n    $.getJSON(\r\n      searchURL,\r\n      {\r\n        article_title: query, //for query\r\n        content_type: \"Conferences\", //only display Conference type\r\n        max_records: 10, //Up to 10 records\r\n        apikey: key //Key\r\n      },\r\n      function(r) {\r\n        //Request with 10 search return the proceed to function(r)\r\n        console.log(r);\r\n        let embedcode = '<hr/><h2>Search Results</h2><hr/><i class=\"fa fa-spinner\" />' //Spin loading while request not finish yet.\r\n        $('#content').html(embedcode);\r\n        embedcode = `<hr/><h2>Search Results</h2><hr/><div class=\"card-columns\" id=\"ieee\">`; //Create an HTML element\r\n        r.articles.forEach(g => { //For every search result, add it to the card with header,title , body, and footer\r\n          embedcode += `<div class=\"card mb-2\">\r\n          <div class=\"card-header\">\r\n          ${g.publication_title}\r\n          </div>\r\n          <div class=\"card-title\">\r\n          ${g.title}\r\n          </div>\r\n          <div class=\"card-body p2\">\r\n          ${g.abstract}<br />\r\n          <a href=\"${g.html_url}\" target=_blank><button type=\"button\" class=\"btn btn-outline-info\">More Info</button></a>\r\n          </div>\r\n          <div class=\"card-footer text-muted\">\r\n          Location: ${g.conference_location}<br />\r\n          Date: ${g.conference_dates}\r\n          </div>\r\n          </div>`;\r\n        });\r\n        embedcode += `</div>`;\r\n        $(\"#content\").html(embedcode); //Display an HTML to #content\r\n      }\r\n    )\r\n    .fail(function(){ //In case it failed to fetch data, It will display this.\r\n      let embedcode = '<hr/><h2>Search Results</h2><hr/>';\r\n      embedcode += `Because of IEEE certificate issue, it will state that the request website is dangerous.<br />\r\n      If you are using chrome and cannot get search result please click link below and ignore the warning:<br />\r\n      <a href=\"https://ieeexploreapi.ieee.org/api/v1/search/articles\">https://ieeexploreapi.ieee.org/api/v1/search/articles</a><br />\r\n      Click on 'Advance' then 'Proceed to ieeexploreapi.ieee.org'\r\n      `\r\n      $('#content').html(embedcode);\r\n    });\r\n  };\r\n  //This is the event handler for the click event\r\n  doSth = () => {\r\n    if (this.props.clicked) this.onSearch();\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.doSth()}\r\n        <div id=\"content\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default IEEESearch;\r\n","import React, { Component } from \"react\";\r\nimport $ from \"jquery\";\r\nclass YouTubeSearch extends Component {\r\n  //This function will execute on click of search button\r\n  onYoutubeSearch = () => {\r\n    const key = process.env.REACT_APP_YOUTUBE; //Key for YouTube Data API\r\n    let q = this.props.q + \", academic conference\"; //Add academic conference to the query (Act like 'q' && 'academic conference')\r\n    //Request a data from YouTube with the following request\r\n    $.get(\r\n      \"https://www.googleapis.com/youtube/v3/search\", //URL to request\r\n      {\r\n        part: \"snippet, id\", //Request for id and snippet\r\n        q, //Query\r\n        maxResults: 10, //Max result is 10\r\n        type: \"video\", //Only display video(not playlist or channel)\r\n        key //API key\r\n      },\r\n      //Then proceed to the function below\r\n      function(data) {\r\n        console.log(data); //Debug purpose\r\n        let result = '<hr/><h2>Videos</h2><hr/><i class=\"fa fa-spinner fa-spin\"/>' //Spin loading while request not finish yet.\r\n        result = '<hr/><h2>Videos</h2><hr/><div class=\"card-columns\">';\r\n        data.items.forEach(obj => { //For each video, include them in card with following HTML\r\n          var title = obj.snippet.title;\r\n          var thumbnails = obj.snippet.thumbnails.medium.url;\r\n          var id = obj.id.videoId;\r\n          //Again, the 'result' is what the content in form of html tag\r\n\r\n          result += `\r\n          <a href=https://www.youtube.com/watch?v=${id} target=_blank class=\"nodecorate\">\r\n            <div class=\"card\">\r\n              <div class=\"card-body\">\r\n                <span class=\"lead\">${title}</span>\r\n              </div>\r\n                <img class=\"card-img-bottom\" src=\"${thumbnails}\">\r\n              </div>\r\n            </a>`;\r\n        });\r\n        result += \"</div>\";\r\n        $(\"#YouTube\").html(result); //Display a result to #YouTube\r\n      }\r\n    );\r\n  };\r\n  //This is event handler for click event\r\n  doSth = () => {\r\n    if (this.props.clicked) this.onYoutubeSearch();\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.doSth()}\r\n        <div id=\"YouTube\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default YouTubeSearch;\r\n","import React, { Component } from \"react\";\r\nimport $ from \"jquery\";\r\nclass Twitter extends Component {\r\n  //This function will execute on button click\r\n  onTwitterSearch = async () => {\r\n    let searchURL = \"https://mwarot.herokuapp.com/\"; //Request URL of server side script\r\n    var query = $(\"#q\").val(); //Get query from id 'q'\r\n    const proxyURL = \"https://cors-anywhere.herokuapp.com/\"; //Proxy to add the CORS header to Twitter sever side script\r\n    let tweetsURL = []; //An array that will keep URL of each tweet\r\n    const c_key = process.env.REACT_APP_TWITTER_C_KEY; //KEY\r\n    const c_secretkey = process.env.REACT_APP_TWITTER_C_KEY_SECRET; //KEY\r\n    const a_token = process.env.REACT_APP_TWITTER_A_TOKEN; //KEY\r\n    const a_token_secret = process.env.REACT_APP_TWITTER_A_TOKEN_SECRET; //KEY\r\n    /** Get and decode JSON from search URL and request with the following:\r\n     *  'q' for query\r\n     *  'result_type' for the result type (recent or popular)\r\n     *  'count' for the number of result per page.\r\n     *  'c_key' for consumer key\r\n     *  'c_secretkey' for consumer secret key\r\n     *  'a_token' for access token\r\n     *  'a_token_secret' for access secret token\r\n     */\r\n    await $.getJSON(\r\n      searchURL,\r\n      {\r\n        q: query,\r\n        result_type: \"popular\",\r\n        count: 10,\r\n        c_key,\r\n        c_secretkey,\r\n        a_token,\r\n        a_token_secret\r\n      },\r\n      //Then proceed to the function below\r\n      function(tweet) {\r\n        console.log(tweet.statuses); //Debugging purpose\r\n        //Each status URL will be pushed in the array 'tweetsURL'\r\n        tweet.statuses.forEach(tw => {\r\n          tweetsURL.push(\r\n            \"https://twitter.com/\" +\r\n              tw.user.screen_name +\r\n              \"/status/\" +\r\n              tw.id_str\r\n          );\r\n        });\r\n        requestEmbed(tweetsURL);\r\n        //Recieved the array of tweets URL and request for embed tweet from 'publish.twitter.com'\r\n        function requestEmbed(tweet) {\r\n          let embed =\r\n            '<hr/><h2>Comments</h2><hr/><i class=\"fa fa-spinner fa-spin\"/>'; //Spin loading while the request not finish yet\r\n          $(\"#TweetContent\").html(embed);\r\n          embed = '<hr/><h2>Comments</h2><hr/><div class=\"card-columns\">';\r\n          tweet.forEach((tweet, key, arr) => {\r\n            //For each tweet, it will request for embed type from twiiter\r\n            fetch(proxyURL + \"https://publish.twitter.com/oembed?url=\" + tweet)\r\n              .then(response => response.json())\r\n              .then(async data => {\r\n                // console.log(data);\r\n                const positive =\r\n                  '<i class=\"fa fa-smile-o\" style=\"color: green; font-size: 2rem\"/>';\r\n                const neutral =\r\n                  '<i class=\"fa fa-meh-o\" style=\"color: grey; font-size: 2rem\"/>';\r\n                const negative =\r\n                  '<i class=\"fa fa-frown-o\" style=\"color: red; font-size: 2rem\"/>';\r\n                let sentimentalscore = 2.5;\r\n                let snippet = data.html; //Get the embed html tag\r\n                await $.post(\r\n                  \"https://mwarot.herokuapp.com/sentiment.php\",\r\n                  {\r\n                    //Request a sentiment rating for a snippet\r\n                    text: snippet\r\n                  },\r\n                  function(rate) {\r\n                    sentimentalscore = Number(rate); //The score will be in range 1-5\r\n                  }\r\n                );\r\n                embed += `<div class=\"card\" style=\"border: none\">\r\n                            <div class=\"card-header\">\r\n                                ${\r\n                                  sentimentalscore > 2.7\r\n                                    ? positive\r\n                                    : sentimentalscore < 2.4\r\n                                    ? negative\r\n                                    : neutral /* score > 2.7 is positive, < 2.3 is negative, and between that is neutral */\r\n                                }\r\n                            </div>\r\n                            ${snippet}\r\n                     </div>`;\r\n                if (key === arr.length - 1) {\r\n                  //If it the last item, insert end div and display embed to #TweetContent\r\n                  //   console.log(embed);\r\n                  embed += \"</div>\";\r\n                  $(\"#TweetContent\").html(embed);\r\n                }\r\n              });\r\n          });\r\n        }\r\n      }\r\n    );\r\n  };\r\n  //This is the event handler for click event\r\n  doSth = () => {\r\n    if (this.props.clicked) this.onTwitterSearch();\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.doSth()}\r\n\r\n        <div id=\"TweetContent\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Twitter;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./component/navbar\";\nimport IEEE from \"./component/IEEE\";\nimport YouTube from \"./component/Youtube\";\nimport Twitter from \"./component/Twitter\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport $ from \"jquery\";\nimport \"./user.css\";\nclass App extends Component {\n  state = {\n    query: \"\",\n    onClick: false\n  };\n  /*This function will tell the other component that the search has been clicked.\n  And it will prevent the form to redirect to page or refresh.*/\n  handleClick = e => {\n    e.preventDefault();\n    this.setState({ query: $(\"#q\").val() });\n    this.setState({ onClick: true });\n  };\n  render() {\n    return (\n      <div>\n        <Navbar /> {/*Load Navbar component*/}\n        <div style={{ marginTop: 4 + \"rem\" }} /> {/*Top Spacing */}\n        <div className=\"container text-center\" id=\"home\">\n          {/*div of the rest component*/}\n          <form\n            className=\"form-inline my-2 my-lg-0 justify-content-center\"\n            onSubmit={this.handleClick}\n          >\n            <input\n              className=\"form-control mr-sm-2\"\n              type=\"text\"\n              placeholder=\"Search\"\n              id=\"q\"\n              required\n            />\n            <button\n              className=\"btn btn-outline-success my-2 my-sm-0\"\n              type=\"submit\"\n            >\n              Search\n            </button>\n          </form>\n          <IEEE clicked={this.state.onClick} q={this.state.query} />\n          <YouTube clicked={this.state.onClick} q={this.state.query} />\n          <Twitter clicked={this.state.onClick} q={this.state.query} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}